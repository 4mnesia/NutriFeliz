package com.example.nutriapp.ui.screen
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AccountCircle
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp


@Composable
fun ProfileScreen(onLogout: () -> Unit) { // onLogout = cierre de sesion

    var showDetails by remember { mutableStateOf(false) }

    var weight by remember { mutableStateOf("") } //  by remember guarda la info
    var height by remember { mutableStateOf("") }
    var age by remember { mutableStateOf("") }
    var gender by remember { mutableStateOf("Seleccionar sexo") }
    var activityLevel by remember { mutableStateOf("Seleccionar nivel") }
    var goal by remember { mutableStateOf("Seleccionar objetivo") }

    var imc by remember { mutableStateOf<Double?>(null) }
    var errorMessage by remember { mutableStateOf<String?>(null) }


    // Colorsitos
    val backgroundColor = Color(0xFF130C27)
    val cardColor = Color(0xFF2B2047)
    val buttonColor = Color(0xFFA49ADD)
    val borderColor = Color(0xFFAA8DFF)
    val textColor = Color.White

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(color = backgroundColor)
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {

        // cajita de perfil
        Card(
            modifier = Modifier.fillMaxWidth(),
            elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),
            colors = CardDefaults.cardColors(containerColor = cardColor)
        ) {
            Column(
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxWidth(),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Icon(
                    imageVector = Icons.Default.AccountCircle,
                    contentDescription = "Perfil",
                    tint = textColor,
                    modifier = Modifier.size(120.dp)
                )
                Text("Test", fontSize = 22.sp, fontWeight = FontWeight.Bold, color = textColor)
                Text("test@gmail.com", fontSize = 16.sp, color = textColor)

                Spacer(modifier = Modifier.height(8.dp))

                Button(
                    onClick = { onLogout() },
                    colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.error)
                ) {
                    Text("Cerrar sesión")
                }

                Spacer(modifier = Modifier.height(8.dp))

                Button(onClick = { showDetails = !showDetails }) {
                    Text(if (showDetails) "Ocultar calculadora" else "Abrir calculadora de macros")
                }
            }
        }

        // Cajita datos
        if (showDetails) {
            Card(
                modifier = Modifier.fillMaxWidth(),
                elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),
                colors = CardDefaults.cardColors(containerColor = cardColor)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp),
                    verticalArrangement = Arrangement.spacedBy(12.dp)
                ) {

                    Row(  //esto hace que se ponga de lado las cositas
                        horizontalArrangement = Arrangement.spacedBy(8.dp),
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        OutlinedTextField(
                            value = weight,
                            onValueChange = { weight = it },
                            label = { Text("Peso (kg)") },
                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                            modifier = Modifier.weight(1f)
                        )
                        OutlinedTextField(
                            value = height,
                            onValueChange = { height = it },
                            label = { Text("Altura (cm)") },
                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                            modifier = Modifier.weight(1f),
                                    colors = OutlinedTextFieldDefaults.colors(
                                    focusedBorderColor = borderColor,
                                    unfocusedBorderColor = borderColor,
                                    cursorColor = textColor,
                                    focusedTextColor = textColor,
                                    unfocusedTextColor = textColor
                            )
                        )
                    }

                    Row(
                        horizontalArrangement = Arrangement.spacedBy(8.dp),
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        OutlinedTextField(
                            value = age,
                            onValueChange = { age = it },
                            label = { Text("Edad") },
                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                            modifier = Modifier.weight(1f),
                            colors = OutlinedTextFieldDefaults.colors(
                                focusedBorderColor = borderColor,
                                unfocusedBorderColor = borderColor,
                                cursorColor = textColor,
                                focusedTextColor = textColor,
                                unfocusedTextColor = textColor
                            )
                        )

                        DropdownMenuSelector(
                            options = listOf("Hombre", "Mujer"),
                            selectedOption = gender,
                            onOptionSelected = { gender = it },
                            label = "Sexo",
                            modifier = Modifier.weight(1f),
                            borderColor = borderColor,
                            textColor = textColor,
                            buttonColor = buttonColor

                        )
                    }

                    DropdownMenuSelector( //que abra ventana hacia abajo
                        options = listOf("Sedentario", "Ligero", "Moderado", "Activo"),
                        selectedOption = activityLevel,
                        onOptionSelected = { activityLevel = it },
                        label = "Nivel de actividad",
                        borderColor = borderColor,
                        textColor = textColor,
                        buttonColor = buttonColor
                    )

                    DropdownMenuSelector(
                        options = listOf("Bajar peso", "Mantener peso", "Subir masa muscular"),
                        selectedOption = goal,
                        onOptionSelected = { goal = it },
                        label = "Objetivo",
                        borderColor = borderColor,
                        textColor = textColor,
                        buttonColor = buttonColor
                    )

                    Button(
                        onClick = {
                            val w = weight.toDoubleOrNull()
                            val h = height.toDoubleOrNull()

                            if (w == null || h == null || w <= 0 || h <= 0) {
                                errorMessage = "Por favor, ingresa peso y altura válidos."
                                imc = null
                            } else {
                                errorMessage = null
                                val hMeters = h / 100
                                imc = w / (hMeters * hMeters)
                            }
                        },
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text("Calcular Macros / IMC")
                    }

                    errorMessage?.let {
                        Text(it, color = MaterialTheme.colorScheme.error)
                    }

                    imc?.let {
                        Text("Tu IMC es: ${String.format("%.2f", it)}", fontWeight = FontWeight.Bold)
                    }
                }
            }
        }
    }
}

//para reutizalar
@Composable
fun DropdownMenuSelector(
    options: List<String>,
    selectedOption: String,
    onOptionSelected: (String) -> Unit,
    label: String,
    modifier: Modifier = Modifier,
    borderColor: Color,
    textColor: Color,
    buttonColor: Color
) {
    var expanded by remember { mutableStateOf(false) }

    Column(modifier = modifier) {
        Text(label, fontWeight = FontWeight.Bold, fontSize = 14.sp)
        Box {
            OutlinedButton(
                onClick = { expanded = true },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(selectedOption)
            }
            DropdownMenu(
                expanded = expanded,
                onDismissRequest = { expanded = false },
                modifier = Modifier.fillMaxWidth()
            ) {
                options.forEach { option ->
                    DropdownMenuItem(
                        text = { Text(option) },
                        onClick = {
                            onOptionSelected(option)
                            expanded = false
                        }
                    )
                }
            }
        }
    }
}
